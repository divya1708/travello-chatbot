import chainlit as cl
from openai import OpenAI
import requests
import json
import time
import urllib.request
from PIL import Image
from io import BytesIO
import  re
model_name = "julep-ai/samantha-1-turbo"
settings = {"temperature": 0.4,"max_tokens": 120,"frequency_penalty": 0.75,"best_of": 2,"stop": ["<", "<|"]}
class Chat:
    def __init__(self, model, settings):
        self.prompt_template = """
        <|im_start|>situation
       Answer the following questions as best you can, but speaking as passionate travel expert.<|im_end|>
        <|im_start|>user (Traveller)
        """
        self.model = model
        self.settings = settings
        self.history = []
        self.image=1
    def extract_json_from_response(self,response_text):
        try:
            # Define a regex pattern to match JSON
            pattern = r'({.*})'
            # Search for the pattern in the response text
            match = re.search(pattern, response_text)
            if match:
                # Extract the matched JSON string
                json_string = match.group(1)
                # Load the JSON string into a Python object
                extracted_json = json.loads(json_string)
                return extracted_json
            else:
                print("No JSON found in the response.")
                return None
        except Exception as e:
            print(f"Error: {e}")
            return None
    # def check_image(self,message:str):
    def _build_full_prompt(self, message: str):
        try:
            history_str = "\n".join(self.history)
            full_prompt = f"""{self.prompt_template}{history_str}
            <|im_start|>user (Traveller)
            {message} <|im_end|>
            <|im_start|>assistant (TravelPal)
            """
            return full_prompt
        except Exception as e:
            print(f"Error: {e}")
            return None
    def save_bytes_to_image(self,byte_data, file_path):
        try:
            # Convert bytes to Image
            image = Image.open(BytesIO(byte_data))
            # Save the Image as a .jpg file
            image.save(file_path, "JPEG")
            print(f"Image saved successfully at: {file_path}")
            return 0
        except Exception as e:
            print(f"Error: {e}")
            return None

    def genarate_image(self,prompt):
        try:
            url = "https://api.starryai.com/creations/"

            payload = {    "model": "lyra",   "aspectRatio": "square",    "highResolution": False,
                "images": 1,"steps": 20,"initialImageMode": "color",  "prompt": prompt}
            headers = {
                "accept": "application/json", "content-type": "application/json", "X-API-Key": "<your key>"         }

            response = requests.post(url, json=payload, headers=headers)
            # print(response.text.id)
            print(response.text)
            a=json.loads(response.text)
            a=a["id"]
            print("value of a is",a)
            return a
        except Exception as e:
            print(f"Error: {e}")
            return None
    def extract_image(self,id):
        try:
            time.sleep(25)
            url = "https://api.starryai.com/creations/"+str(id)
            print("the url is ",url)
            headers = {  "accept": "application/json",   "X-API-Key": "<your key>"  }
            response = requests.get(url, headers=headers)
            print(response.text)
            b=json.loads(response.text)
            print("the value of b is ", b)
            c=b["images"]
            print("the value of c is ", c)
            c=c[0]
            print("the value of c after is ", c)
            temp=c["url"]
            print("the value of temp is ", temp)
            return temp
        except Exception as e:
            print(f"Error: {e}")
            return None
    def call_prompt_genertor_image_and_save(self,full_prompt):
        try:
            image_generator_prompt= "understand the content and striclty return only the name of the place the user mentioned to visit, donot include any other words and special characters." +full_prompt
            completion_i = client.completions.create(model=self.model, prompt=image_generator_prompt, **self.settings)
            response_text_i = completion_i.choices[0].text.strip()
            print("the response generated by the prompt to send to image generator ai is {0} \n\n".format(response_text_i))
            res=self.genarate_image(response_text_i)
            res_str=str(res)
            urll=self.extract_image(id=res_str)
            print("the url of image is {0}".format(urll))
            self.image=0
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            req = urllib.request.Request(urll, headers=headers)
            data = urllib.request.urlopen(req).read()  
            status=self.save_bytes_to_image(data, file_path="output_image.jpg")
            return status
        except Exception as e:
            print(f"Error: {e}")
            return None
    def respond(self, message: str):
        try:
            print("Responding to message")
            full_prompt = self._build_full_prompt(message)
            print("The full prompt is ----------------{0}".format(full_prompt))
            completion = client.completions.create(model=self.model, prompt=full_prompt, **self.settings)
            response_text = completion.choices[0].text.strip()
            print("the response text is {0}".format(response_text))
            last_full_stop_index = response_text.rfind('.')
            if last_full_stop_index != -1:
                response_text = response_text[:last_full_stop_index + 1]
            self._update_history(message, response_text)
            #step2 generate image
            if self.image==1:
                check_if_image_prompt="please return your response strictly in json format {\"response\": Y/N} only donot include any other explanation , words or characters. if the user is asking about a tavel destination then return Y else return N. users input is: "+message 
                completion_image_flag = client.completions.create(model=self.model, prompt=check_if_image_prompt, **self.settings)
                response_text_image_flag = completion_image_flag.choices[0].text.strip()
                print("the flag for image response is {0}".format(response_text_image_flag))
                response_text_image_flag=self.extract_json_from_response(response_text_image_flag)
                if response_text_image_flag != None and "response" in response_text_image_flag and response_text_image_flag["response"] == "Y":
                    print("YAYYYYY")
                    status=self.call_prompt_genertor_image_and_save(full_prompt)
                    if status==0:
                        return response_text, 0
            return response_text, 1
        except Exception as e:
            print(f"Error: {e}")
            return "Error in generating response", 1

    def _update_history(self, message: str, response_text: str):
        self.history.append(f"""
                            <|im_start|>user (Traveller)
                            {message} <|im_end|>
                            <|im_start|>assistant (TravelPal)
                            {response_text} <|im_end|>""")
    def generate_stories(self):
        print("The user clicked on the generate_stories button!")
        full_prompt_4 = "You are an AI with an adventurous spirit, generate a short 50 words travel anecdote which shall excite the user to travel"
        completion_4= client.completions.create(model=self.model, prompt=full_prompt_4, **self.settings)
        print("the complete response is ------- {0} \n".format(completion_4))
        response_text_4 = completion_4.choices[0].text.strip()
        # response_text_4=response_text_4.replace(".","")
        # response_text_4.strip()
        last_full_stop_index = response_text_4.rfind('.')
        if response_text_4 != -1:
            response_text_4 = response_text_4[:last_full_stop_index + 1]
        response_text_4="Heres your story "+response_text_4+ "...... \n I hope this story has left you with curiosity,\n Come on ask me travel related questions"
        print("the response of generate_stories prompt is {0}".format(response_text_4))
        return response_text_4

chat = Chat(model_name, settings)


    

@cl.on_chat_start
async def start():
    image = cl.Image(path="travel.gif", name="image1", display="inline",size="large")
    # Attach the image to the message
    await cl.Message(content="HELLO TRAVELLER, I AM HERE TO HELP YOU!",elements=[image],author="TRAVELPAL").send()
    await cl.Avatar(name="TRAVELPAL",url="https://avatars.githubusercontent.com/u/128686189?s=400&u=a1d1553023f8ea0921fba0debbe92a8c5f840dd9&v=4",).send()
     # Sending an action button within a chatbot message
    actions = [cl.Action(name="travelstory", value="example_value", description="Click me!")]
    await cl.Message(content="Click me for a travel story", actions=actions, author="TRAVELPAL").send()

@cl.on_message
async def main(message: str):
    msg = cl.Message(content="", author="TRAVELPAL")
    await msg.send()
    # do some work
    await cl.sleep(2)
    response, image_tag = chat.respond(message.content)
    if image_tag==0:
        image_GEN = cl.Image(path="output_image.jpg", name="image1", display="inline",size="large")
        await cl.Message(content="LOOK AT THESE TRAVELLER!, DONT YOU FEEL LIKE TRAVELLING",elements=[image_GEN],author="TRAVELPAL").send()


    await cl.Message(content=response, author="TRAVELPAL").send()
@cl.action_callback("travelstory")
async def on_action(action: cl.Action):
    response_generate_stories =chat.generate_stories()
    await cl.Message(content=response_generate_stories, author="TRAVELPAL").send()

client = OpenAI(
    api_key="<your key>",
    base_url="https://api-alpha.julep.ai/v1"
)
    
# chainlit run oo.py --port 8080 -w
